import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";

import { api, type RouterOutputs } from "~/utils/api";
import Header from "~/components/Header";
import { useState } from "react";
import NoteEditor from "~/components/NoteEditor";
import NoteCard from "~/components/NoteCard";

const Home: NextPage = () => {
  const hello = api.example.hello.useQuery({ text: "from tRPC" });

  return (
    <>
      <Head>
        <title>RillNotes</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Header />
        <Content />
      </main>
    </>
  );
};

export default Home;


type Topic = RouterOutputs["topic"]["getAll"][0]

const Content: React.FC = () => {
  const { data: sessionData } = useSession();

  const [selectedTopics, setSelectedTopics] = useState<Topic | null>(null)

  const { data: topics, refetch: refetchTopics } = api.topic.getAll.useQuery(
    undefined, {
    enabled: sessionData?.user !== undefined,
    onSuccess: (data) => {
      setSelectedTopics(selectedTopics ?? data[0] ?? null);
    }
  }
  )

  const createTopic = api.topic.createData.useMutation({
    onSuccess: () => {
      void refetchTopics()
    }
  })

  const { data: notes, refetch: refetchNotes } = api.note.getAll.useQuery(
    {
      topicId: selectedTopics?.id ?? "",
    },
    {
      enabled: sessionData?.user !== undefined && selectedTopics !== null,
      // onSuccess: (data) => {
      //   setSelectedTopics(selectedTopics ?? data[0] ?? null);
      // }
    }
  )

  const createNote = api.note.createNote.useMutation({
    onSuccess: () => {
      void refetchNotes()
    }
  })

  const deleteNote = api.note.deleteNote.useMutation({
    onSuccess: () => {
      void refetchNotes()
    }
  })

  return (
    <div className="mx-5 mt-5 grid grid-cols-4 gap-2">
      <div className="px-2">
        <ul className="menu rounded-box w-56 bg-base-100 p-2">
          {topics?.map((topic) => (
            <li key={topic.id}>
              <a href="#"
                onClick={(e) => {
                  e.preventDefault();
                  setSelectedTopics(topic);
                }}
              >
                {topic.title}
              </a>
            </li>
          ))}
        </ul>
        <div className="divider"></div>
        <input type="text"
          placeholder="New Topic"
          className="input-bordered input input-sm w-full"
          onKeyDown={(e) => {
            if (e.key === "Enter") {
              createTopic.mutate({
                title: e.currentTarget.value
              })
              e.currentTarget.value = ""
            }
          }} />
      </div>
      <div className="col-span-3">
        <div>
          {notes?.map((note) => (
            <div key={note.id} className="mt-5">
              <NoteCard
              note={note}
              onDelete={() => void deleteNote.mutate({ id: note.id})} />
              
            </div>
          ))}
        </div>
        <NoteEditor
          onSave={({ title, content }) => {
            void createNote.mutate({
              title,
              content,
              topicId: selectedTopics?.id ?? ""
            })
          }} />
      </div>
    </div>
  )

  // return <div>{JSON.stringify(topics)}</div>

  // const { data: secretMessage } = api.example.getSecretMessage.useQuery(
  //   undefined, // no input
  //   { enabled: sessionData?.user !== undefined },
  // );

  // return (
  //   <div className="flex flex-col items-center justify-center gap-4">
  //     <p className="text-center text-2xl text-white">
  //       {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
  //       {secretMessage && <span> - {secretMessage}</span>}
  //     </p>
  //     <button
  //       className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
  //       onClick={sessionData ? () => void signOut() : () => void signIn()}
  //     >
  //       {sessionData ? "Sign out" : "Sign in"}
  //     </button>
  //   </div>
  // );
};
